//
// Andrew L. Sandoval & Peter Sommerlad - C++ ISO Document N4189
// Reference: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4189.pdf
// Adapted for Visual Studio 2013 by Andrew L. Sandoval
#ifndef UNIQUE_RESOURCE_H_
#define UNIQUE_RESOURCE_H_
#pragma once
#define NOEXCEPT
#define NOEXCEPT_P(a)

namespace std
{
	namespace experimental
	{
		template<typename R, typename D>
		class unique_resource
		{
			R resource;
			D deleter;
			bool execute_on_destruction; // exposition only
			unique_resource& operator=(unique_resource const &) = delete;
			unique_resource(unique_resource const &) = delete; // no copies!
		public:
			// construction
			explicit unique_resource(R && resource, D && deleter, bool shouldrun = true) NOEXCEPT:
				resource(std::move(resource)),
				deleter(std::move(deleter)),
				execute_on_destruction{ shouldrun }
			{
			}

			// move
			unique_resource(unique_resource &&other) NOEXCEPT :
			resource(std::move(other.resource)),
				deleter(std::move(other.deleter)),
				execute_on_destruction{ other.execute_on_destruction }
			{
				other.release();
			}

				unique_resource& operator=(unique_resource &&other) NOEXCEPT_P(NOEXCEPT_P(this->reset()))
			{
					this->reset();
					this->deleter = std::move(other.deleter);
					this->resource = std::move(other.resource);
					this->execute_on_destruction = other.execute_on_destruction;
					other.release();
					return *this;
			}

			// resource release
			~unique_resource() NOEXCEPT_P(NOEXCEPT_P(this->reset()))
			{
				this->reset();
			}

			void reset() NOEXCEPT_P(NOEXCEPT_P(this->get_deleter()(resource)))
			{
				if(execute_on_destruction)
				{
					this->execute_on_destruction = false;
					this->get_deleter()(resource);
				}
			}

			void reset(R && newresource) NOEXCEPT_P(NOEXCEPT_P(this->reset()))
			{
				this->reset();
				this->resource = std::move(newresource);
				this->execute_on_destruction = true;
			}

			R const & release() NOEXCEPT
			{
				this->execute_on_destruction = false;
				return this->get();
			}

				// resource access
			R const & get() const NOEXCEPT
			{
				return this->resource;
			}

			operator R const &() const NOEXCEPT
			{
				return this->resource;
			}

			R operator->() const NOEXCEPT
			{
				return this->resource;
			}

			std::add_lvalue_reference_t<std::remove_pointer_t<R> > operator*() const
			{
					return *this->resource;
			}
			// deleter access
			const D & get_deleter() const NOEXCEPT
			{
				return this->deleter;
			}
		};

		// C++14:
		//factories
//		template<typename R, typename D> auto make_unique_resource(R && r, D &&d) NOEXCEPT
//		{
//			return unique_resource<R, std::remove_reference_t<D>>(std::move(r),
//				std::forward<std::remove_reference_t<D>>(d),
//				true);
//		}
//
//		template<typename R, typename D> auto make_unique_resource_checked(R r, R invalid, D d) NOEXCEPT
//		{
//			bool shouldrun = not bool(r == invalid);
//			return unique_resource<R, D>(std::move(r), std::move(d), shouldrun);
//		}
//
		template<typename R, typename D> unique_resource<R,D> make_unique_resource(R && r, D &&d) NOEXCEPT
		{
			return unique_resource<R, std::remove_reference_t<D>>(std::move(r),
				std::forward<std::remove_reference_t<D>>(d),
				true);
		}

		template<typename R, typename D> unique_resource<R,D> make_unique_resource_checked(R r, R invalid, D d) NOEXCEPT
		{
			bool shouldrun = not bool(r == invalid);
			return unique_resource<R, D>(std::move(r), std::move(d), shouldrun);
		}
	}
}
#endif // UNIQUE RESOURCE H